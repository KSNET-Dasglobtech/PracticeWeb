//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PracticeWeb.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBEntities : DbContext
    {
        public DBEntities()
            : base("name=DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
    
        public virtual ObjectResult<GetAllAppointments_Result> GetAllAppointments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAppointments_Result>("GetAllAppointments");
        }
    
        public virtual int GetAllPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllPatients");
        }
    
        public virtual ObjectResult<PatientDetail> GetPatients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatientDetail>("GetPatients");
        }
    
        public virtual int DeletePatient(Nullable<long> patNum)
        {
            var patNumParameter = patNum.HasValue ?
                new ObjectParameter("patNum", patNum) :
                new ObjectParameter("patNum", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePatient", patNumParameter);
        }
    
        public virtual ObjectResult<GetPatientById_Result> GetPatientById(Nullable<long> patNum)
        {
            var patNumParameter = patNum.HasValue ?
                new ObjectParameter("patNum", patNum) :
                new ObjectParameter("patNum", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientById_Result>("GetPatientById", patNumParameter);
        }
    }
}
